[{"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\index.js":"1","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\App.js":"2","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\Login\\index.jsx":"3","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\Admin\\components\\right-header\\index.jsx":"4","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\Admin\\components\\left-nav\\index.jsx":"5","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\notFount\\index.jsx":"6","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\home\\index.jsx":"7","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\Admin\\index.jsx":"8","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\setting\\pages\\Account.jsx":"9","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\setting\\pages\\Member.jsx":"10","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lifejob\\index.jsx":"11","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lives\\index.jsx":"12","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\resource\\index.jsx":"13","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\activities\\index.jsx":"14","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\setting\\index.jsx":"15","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\index.js":"16","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\adminApi.js":"17","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\tools\\cache-tool.js":"18","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\config\\config.js":"19","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\setting\\pages\\components\\editPwdPanel.jsx":"20","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lives\\pages\\LiveList.jsx":"21","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lives\\pages\\LiveAdd.jsx":"22","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\liveApi.js":"23","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\components\\UploadImg.jsx":"24","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\components\\rich-text-editor.jsx":"25","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lives\\pages\\EditLive.jsx":"26","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\activities\\pages\\ActivitieList.jsx":"27","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\activities\\pages\\AddActivities.jsx":"28","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\activities\\pages\\EditActivities.jsx":"29","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\activitiesApi.js":"30","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\components\\z-tag.jsx":"31","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\homeApi.js":"32","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lifejob\\pages\\EditLife.jsx":"33","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lifejob\\pages\\LifeAdd.jsx":"34","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lifejob\\pages\\LifeList.jsx":"35","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\resource\\pages\\EditResource.jsx":"36","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\resource\\pages\\AddResource.jsx":"37","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\resource\\pages\\ResourceList.jsx":"38","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\home\\pages\\HomeList.jsx":"39","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\home\\pages\\SiteSetting.jsx":"40","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\home\\components\\top-card\\index.jsx":"41","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\home\\components\\main-echarts\\index.jsx":"42","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\resourceApi.js":"43","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\lifejobApi.js":"44"},{"size":312,"mtime":1611055819659,"results":"45","hashOfConfig":"46"},{"size":609,"mtime":1611365341267,"results":"47","hashOfConfig":"46"},{"size":2721,"mtime":1611124444146,"results":"48","hashOfConfig":"46"},{"size":2073,"mtime":1611214798588,"results":"49","hashOfConfig":"46"},{"size":4191,"mtime":1611316086343,"results":"50","hashOfConfig":"46"},{"size":214,"mtime":1611307883095,"results":"51","hashOfConfig":"46"},{"size":552,"mtime":1611367752249,"results":"52","hashOfConfig":"46"},{"size":2394,"mtime":1611365397094,"results":"53","hashOfConfig":"46"},{"size":6914,"mtime":1611210974982,"results":"54","hashOfConfig":"46"},{"size":211,"mtime":1611065909354,"results":"55","hashOfConfig":"46"},{"size":679,"mtime":1611365923925,"results":"56","hashOfConfig":"46"},{"size":668,"mtime":1611306634081,"results":"57","hashOfConfig":"46"},{"size":723,"mtime":1611366338612,"results":"58","hashOfConfig":"46"},{"size":753,"mtime":1611316467417,"results":"59","hashOfConfig":"46"},{"size":616,"mtime":1611066017402,"results":"60","hashOfConfig":"46"},{"size":1400,"mtime":1611122711797,"results":"61","hashOfConfig":"46"},{"size":1333,"mtime":1611123330028,"results":"62","hashOfConfig":"46"},{"size":373,"mtime":1611122897928,"results":"63","hashOfConfig":"46"},{"size":130,"mtime":1611123343062,"results":"64","hashOfConfig":"46"},{"size":2667,"mtime":1611148694111,"results":"65","hashOfConfig":"46"},{"size":5897,"mtime":1611326395235,"results":"66","hashOfConfig":"46"},{"size":7221,"mtime":1611363411233,"results":"67","hashOfConfig":"46"},{"size":1374,"mtime":1611235585580,"results":"68","hashOfConfig":"46"},{"size":2869,"mtime":1611322518751,"results":"69","hashOfConfig":"46"},{"size":3706,"mtime":1611235689829,"results":"70","hashOfConfig":"46"},{"size":8040,"mtime":1611309489619,"results":"71","hashOfConfig":"46"},{"size":5921,"mtime":1611324776769,"results":"72","hashOfConfig":"46"},{"size":8371,"mtime":1611363901791,"results":"73","hashOfConfig":"46"},{"size":8366,"mtime":1611363965629,"results":"74","hashOfConfig":"46"},{"size":1992,"mtime":1611235585454,"results":"75","hashOfConfig":"46"},{"size":3476,"mtime":1611235689913,"results":"76","hashOfConfig":"46"},{"size":590,"mtime":1611235585494,"results":"77","hashOfConfig":"46"},{"size":8040,"mtime":1611365776651,"results":"78","hashOfConfig":"46"},{"size":7221,"mtime":1611365768396,"results":"79","hashOfConfig":"46"},{"size":5572,"mtime":1611391997474,"results":"80","hashOfConfig":"46"},{"size":217,"mtime":1611366379557,"results":"81","hashOfConfig":"46"},{"size":216,"mtime":1611366382840,"results":"82","hashOfConfig":"46"},{"size":5764,"mtime":1611391821699,"results":"83","hashOfConfig":"46"},{"size":1788,"mtime":1611389384349,"results":"84","hashOfConfig":"46"},{"size":222,"mtime":1611366513291,"results":"85","hashOfConfig":"46"},{"size":932,"mtime":1611368398804,"results":"86","hashOfConfig":"46"},{"size":0,"mtime":1611389377272,"results":"87","hashOfConfig":"46"},{"size":2200,"mtime":1611235585616,"results":"88","hashOfConfig":"46"},{"size":1266,"mtime":1611235585546,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"1fqq7tq",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"101","usedDeprecatedRules":"92"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"92"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"92"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"92"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"92"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"138","usedDeprecatedRules":"92"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"92"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"152","usedDeprecatedRules":"92"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"155","usedDeprecatedRules":"92"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"158","usedDeprecatedRules":"92"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"92"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\index.js",[],["191","192"],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\App.js",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\Login\\index.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\Admin\\components\\right-header\\index.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\Admin\\components\\left-nav\\index.jsx",["193","194"],"import React, { Component } from 'react'\r\n\r\nimport logo from './images/logo192.png'// 引入照片logo\r\nimport './index.scss'//它的css样式\r\nimport \"./fonts/iconfont.css\"//字体图标\r\n\r\n// 引入列表数据\r\nimport menus from './config/menuConfig.json'\r\n\r\n// 引入路由部分\r\nimport { Link,withRouter} from \"react-router-dom\";\r\n\r\n// 引入ajax获取用户头像，信息\r\nimport { getUser } from \"../../../../api/adminApi\";\r\n\r\n// 引入订阅\r\nimport PubSub from \"pubsub-js\";\r\n\r\n// 引入antd\r\nimport { Layout ,Menu} from 'antd';\r\nconst {  Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\n\r\n class LeftNav extends Component {\r\n        constructor(props){\r\n            super(props)\r\n            this.state={\r\n              menuList:menus,\r\n              account_name:getUser().account_name,\r\n              account_icon:getUser().account_icon,\r\n              shuffling:false,//左右移动控制\r\n            }\r\n            \r\n        }\r\n       \r\n        _renderMenu(menuList){\r\n          return menuList.map((item)=>{\r\n               if(!item.children){\r\n                //  没有孩子，是item\r\n                  return (<Menu.Item key={item._key} >\r\n                      {/*  */}\r\n                      <Link to={item._key}>\r\n                        <span className={item.icon } style={{fontSize:!this.state.shuffling? '16px':'25px'}}></span>\r\n                        <span>{this.state.shuffling?'':item.title}</span>\r\n                      </Link>\r\n                  </Menu.Item>)\r\n\r\n               }else{\r\n                //  是sub\r\n                return(\r\n                  <SubMenu key={item._key} \r\n                   title={\r\n                    <span>\r\n                       <span className={item.icon} style={{fontSize:!this.state.shuffling? '16px':'25px'}}> </span> \r\n                       <span>{this.state.shuffling?'':item.title}</span>\r\n                    </span>\r\n                     }>\r\n                   {this. _renderMenu(item.children)}\r\n                  </SubMenu>\r\n                )\r\n               \r\n\r\n               }\r\n          })\r\n        }\r\n      // 查找需要让哪个Submenu展开\r\n    _getOpenKeys(menuList,path){\r\n      for(let i=0; i<menuList.length; i++){\r\n          let item = menuList[i]\r\n          if(item.children && item.children.find(c_item=>c_item._key == path)){\r\n              return item._key\r\n          }\r\n      }\r\n  }\r\n    render() {\r\n      let {account_name,account_icon,menuList} = this.state;\r\n      // 获取当前的路由\r\n      let path = this.props.location.pathname; \r\n      let ppath = path.substr(0, path.indexOf(\"/\",2)) ? path.substr(0, path.indexOf(\"/\",2)) : path\r\n      let openKeys = this._getOpenKeys(menuList,path)\r\n      // 接收订阅\r\n      PubSub.subscribe(\"handleshuffling\",(_,{data})=>{\r\n        console.log(data);\r\n        this.setState({\r\n          shuffling:data\r\n        })\r\n        console.log(this.state.shuffling);\r\n      })\r\n        return (\r\n            <Sider collapsible collapsed={this.state.shuffling} className=\"sider-left\">\r\n                    <div className=\"sider-top\" >\r\n                        <div className=\"log\">\r\n                          <img src={account_icon?this.state.account_icon :logo} alt=\"\"/>\r\n                        </div>\r\n                        <p>{this.state.account_name?account_name:'管理员'}</p>\r\n                    </div>\r\n\r\n                      <Menu\r\n                       defaultSelectedKeys={[path]}  \r\n                       selectedKeys={[path,ppath]}\r\n                       defaultOpenKeys={openKeys}\r\n                        mode=\"inline\"\r\n                        theme=\"dark\"\r\n                        // 此方法为菜单是否收起，要么折叠要么展开\r\n                        >\r\n                          {\r\n                            this._renderMenu(this.state.menuList)\r\n                          }\r\n                        </Menu>\r\n            </Sider>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n\r\n      PubSub.subscribe(\"userChange\",()=>{\r\n        this.setState({\r\n          account_name:getUser().account_name,\r\n          account_icon:getUser().account_icon\r\n        })\r\n    })\r\n  }\r\n}\r\nexport default withRouter(LeftNav)\r\n","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\notFount\\index.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\home\\index.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\Admin\\index.jsx",["195"],"import React, { Component } from 'react'\r\n\r\n// 引入容器组件\r\nimport Header from \"./components/right-header\"\r\nimport LeftNav from \"./components/left-nav\"\r\n// 引入样式\r\nimport \"./index.scss\";\r\n\r\n// 引入路由部分\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\n// 引入路由组件\r\nimport Home from \"../home\";\r\nimport Lifejob from \"../lifejob\";\r\nimport Lives from \"../lives\";\r\nimport Activities from \"../activities\";\r\nimport Resource from \"../resource\";\r\nimport Setting from \"../setting\";\r\nimport NotFount from \"../notFount\";\r\n\r\n// 引入ajax请求\r\nimport { isLogin} from \"../../api/adminApi\";\r\n\r\n\r\n// 引入antd\r\nimport { Layout } from 'antd';\r\nconst { Footer, Content } = Layout;\r\n\r\nexport default class Admin extends Component {\r\n  \r\n    render() {\r\n        // 如果没有数据，代表被清了，或者没有登录\r\n            if(!isLogin()){\r\n                this.props.history.replace(\"/login\")\r\n            }\r\n        return (\r\n            \r\n                <Layout className=\"layout_all\">\r\n                    {/* 导航栏组件 */}\r\n                    <LeftNav>\r\n                    </LeftNav>\r\n                    {/* 右边部分 */}\r\n                    <Layout>\r\n                        {/* 顶部组件 */}\r\n                        <Header></Header>\r\n                        {/* 内容出口 */}\r\n                        <Content className=\"content-main\">\r\n                             <Switch>\r\n                                <Redirect exact path=\"/\" exact to='/home'></Redirect>\r\n                                <Route  path=\"/home\" component={Home}></Route>\r\n                                <Route  path=\"/resource\" component={Resource}></Route>\r\n                                <Route  path=\"/lifejob\" component={Lifejob}></Route>\r\n                                <Route  path=\"/activities\" component={Activities}></Route>\r\n                                <Route  path=\"/live\" component={Lives}></Route>\r\n                                <Route path=\"/setting\" component={Setting}></Route>\r\n                                <Route  path=\"*\" component={ NotFount }></Route>\r\n                            </Switch>\r\n                        </Content>\r\n                        {/* 底部内容 */}\r\n                        <Footer>底部内容</Footer>\r\n                    </Layout>\r\n                </Layout>\r\n           \r\n        )\r\n    }\r\n}\r\n","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\setting\\pages\\Account.jsx",["196"],"import React from 'react'\r\n\r\n// 引入模态对话框的组件\r\nimport EditPwdPanel from \"./components/editPwdPanel\";\r\n\r\n// 引入ajax请求\r\nimport { getUser,changeAmdinMsg,saveUser} from \"../../../api/adminApi\";\r\n\r\n// 引入scss文件\r\nimport \"./account.scss\"\r\n\r\n// 引入antd\r\nimport { Card,Form, Input, Button,Upload, message  } from 'antd';\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\r\n\r\n// 引入图片的请求地址头\r\nimport config from \"../../../config/config\"\r\n\r\n// 引入订阅\r\nimport PubSub from \"pubsub-js\";\r\n\r\n//   上传图片前掉的钩子\r\n  function beforeUpload(file) {\r\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n    if (!isJpgOrPng) {\r\n      message.error('上传的为文件必须是JPG或者PNG格式!');\r\n    }\r\n    const isLt2M = file.size / 1024 / 1024 < 2;\r\n    if (!isLt2M) {\r\n      message.error('图片大小不能超过2MB!');\r\n    }\r\n    return isJpgOrPng && isLt2M;\r\n}\r\n\r\nexport default class Account extends React.Component {\r\n        state = {\r\n            isModalVisible:false,//控制修改密码的模态框是否显示\r\n            loading: false,//上传的状态\r\n            account_icon:'',// 管理员的头像\r\n            account:\"\", // 账户名\r\n            account_name:\"\",// 昵称\r\n            token:\"\", // 令牌\r\n           \r\n        };\r\n        formRef = React.createRef();\r\n        \r\n        // 上传文件改变时的状态，如果正在上传，loading为真，也就是小圆圈转圈 那个icon  \r\n        // 如果状态时done，表示图片上传完毕，我们得到服务器给的图片，调用getBase64函数，然后改变imageUrl和loading 的值\r\n        handleChange = (info) => {\r\n            if (info.file.status === 'uploading') {\r\n              this.setState({ loading: true });\r\n              return;\r\n            }\r\n            if (info.file.status === 'done') {\r\n              // Get this url from response in real world.\r\n              message.success(\"头像上传成功\")\r\n              let imgUrl = config.BASE_URL + info.file.response.data.name;\r\n                //   将图片给state\r\n                this.setState({\r\n                    loading:false,\r\n                    account_icon:imgUrl\r\n                })\r\n            }\r\n          };\r\n        // 点击（修改密码打开模态对话框）\r\n        _showEditPwdPanel=(e)=>{\r\n            e.preventDefault()\r\n            this.setState({\r\n                isModalVisible:true\r\n            })\r\n        }\r\n        // 给EditPwdPanel组件传递一个方法\r\n        _hideEditPwdPanel=()=>{\r\n            this.setState({\r\n                isModalVisible:false\r\n            })\r\n        }\r\n        // 点击提交后，form表单给的数据\r\n        _onFinish = (values) => {\r\n            let{token,account_icon}=this.state\r\n            // 发起ajax请求，修改信息\r\n            // 此地的values.account_name，因为还没有存在state中，而其他的都已经一开始就被存入到state中\r\n            changeAmdinMsg(token, values.account_name, account_icon).then(res=>{\r\n                console.log(res);\r\n                if(res.status===1){\r\n                    // 保存用户信息\r\n                    saveUser(res.data)\r\n                    // 发布订阅\r\n                    PubSub.publish(\"userChange\")\r\n                    message.success(res.msg)\r\n                }else{\r\n                    message.err(res.msg)\r\n                }\r\n            }).catch(err=>{\r\n                message.err(err)\r\n            })\r\n\r\n          };\r\n    render() {\r\n          let { loading } = this.state;\r\n            // 判断loading是否为真，然后里面显示的东西（组件内容）\r\n          const uploadButton = (\r\n            <div>\r\n              {loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n              <div style={{ marginTop: 8 }}>Upload</div>\r\n            </div>\r\n          );\r\n        return (\r\n            <Card title=\"管理员信息编辑\"  className=\"card-main\">\r\n                     <Form  ref={this.formRef}  onFinish={this._onFinish} labelCol={{ span: 2 }} wrapperCol={{ span: 8 }} >\r\n                        <Form.Item name='account' label=\"账户名\" >\r\n                            <Input disabled/>\r\n                        </Form.Item>\r\n                        <Form.Item name='account_name' label=\"管理员名称\" rules={[{ required: true, message: '请输入管理员名称！'  }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name='account_icon' label=\"管理员头像\">\r\n                             <Upload\r\n                                name=\"admin_avatar\"\r\n                                listType=\"picture-card\"//上传列表的内建样式，支持三种基本样式 text, picture 和 picture-card\r\n                                className=\"avatar-uploader\"\r\n                                showUploadList={false}//是否展示文件列表,\r\n                                action=\"/api/auth/admin/upload_admin_icon\"//上传的地址\r\n                                beforeUpload={beforeUpload}//上传文件之前的钩子，参数为上传的文件，若返回 false 则停止上传。\r\n                                onChange={this.handleChange}//上传文件改变时的状态\r\n                            >\r\n                                {this.state.account_icon ? <img src={this.state.account_icon} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\r\n                            </Upload>\r\n                        </Form.Item>\r\n                        <Form.Item  >\r\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"button-change\">\r\n                              修改\r\n                            </Button>\r\n                            或者 <a  onClick={this._showEditPwdPanel}>修改密码?</a>\r\n                        </Form.Item>\r\n                        </Form>\r\n                        <EditPwdPanel visible={this.state.isModalVisible} hideFunc={this._hideEditPwdPanel} ></EditPwdPanel>\r\n            </Card>\r\n        )\r\n    }\r\n    // 钩子函数，在render后调用，获取ajax数据，将数据放在state中\r\n    componentDidMount(){\r\n        this.setState({\r\n            account:getUser().account,\r\n            account_icon:getUser().account_icon,\r\n            account_name:getUser().account_name,\r\n            token:getUser().token,\r\n            // 因为setState时异步处理，如果直接将数据放在form中的话\r\n            // 会导致form表单中的数据都是旧数据，还是那些没有更新的数据，在这里是空\r\n        },()=>{\r\n            // 此时是setstate执行后再执行的地方\r\n            let{ account, account_name}=this.state\r\n            this.formRef.current.setFieldsValue({\r\n                account,\r\n                account_name\r\n            })\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\setting\\pages\\Member.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lifejob\\index.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lives\\index.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\resource\\index.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\activities\\index.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\setting\\index.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\index.js",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\adminApi.js",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\tools\\cache-tool.js",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\config\\config.js",["197"],"export default {\r\n    BASE_URL: 'http://localhost:5000',\r\n    KEY: 'admin@#*09221``~~---++===yyyjhh',\r\n    ADMIN_KEY: 'admin'\r\n}\r\n","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\setting\\pages\\components\\editPwdPanel.jsx",["198"],"import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\"\r\n\r\n// 引入ajax请求\r\nimport { getUser,changeAdminPwd,removeUser} from \"../../../../api/adminApi\";\r\n// 引入antd\r\nimport { Modal, Form, Input, Button, Checkbox, message } from 'antd';\r\n\r\n// 引入路由，将该组件变成路由组件\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n class editPwdPanel extends Component {\r\n    static propTypes = {\r\n        visible: PropTypes.bool.isRequired,\r\n        hideFunc: PropTypes.func.isRequired\r\n    }\r\n    // 点击确定关闭对话框\r\n      _handleOk = () => {\r\n        this.props.hideFunc()\r\n      };\r\n    // 提交表单，点击button按钮触发\r\n      onFinish = (values) => {\r\n        console.log('Success:', values);\r\n        if(values.oldpassword===values.newpassword){\r\n                message.warning(\"新旧密码不能一样！！！\")\r\n                return\r\n        }\r\n        changeAdminPwd( getUser().token,values.oldpassword, values.newpassword).then(res=>{\r\n            console.log(res);\r\n            if(res.status===1){\r\n                message.success(res.msg)\r\n            }\r\n            this._handleOk()\r\n            removeUser()\r\n            this.props.history.replace(\"/login\")\r\n        }).catch(err=>{\r\n            message.err(\"请检查网络链接！\")\r\n        })\r\n       \r\n      };\r\n    render() {\r\n        return (\r\n            <Modal title=\"修改密码\" visible={this.props.visible} footer={null} keyboard maskClosable={false} onCancel={this._handleOk}>\r\n                 <Form\r\n                name=\"basic\"\r\n                onFinish={this.onFinish}\r\n                >\r\n                        <Form.Item\r\n                            label=\"旧密码\"\r\n                            name=\"oldpassword\"\r\n                            rules={[{ required: true, message: '请输入旧密码' }]}\r\n                        >\r\n                            <Input.Password />\r\n                        \r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"新密码\"\r\n                            name=\"newpassword\"\r\n                            rules={[{ required: true, message: '请输入新密码' }]}\r\n                        >\r\n                            <Input.Password />\r\n                        </Form.Item>\r\n                        <Form.Item >\r\n                            <Button type=\"primary\" htmlType=\"submit\" >\r\n                                  确定\r\n                            </Button>\r\n                        </Form.Item>\r\n                </Form>\r\n          </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(editPwdPanel)\r\n","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lives\\pages\\LiveList.jsx",["199","200"],"import React, { Component } from 'react'\r\nimport {Card, Button, Table,Divider,Switch, message ,Modal,notification } from 'antd'\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\n// ajax请求\r\nimport { getLive ,setFocusLive,deleteLive} from \"../../../api/liveApi\";\r\n// 获取图片默认地址\r\nimport config from \"../../../config/config\";\r\nexport default class LiveList extends Component {\r\n    // 一开始获取数据\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            isLoading:false,\r\n            pageSize:5,\r\n            totalSize:0,\r\n            dataSource:[],//数据\r\n        }\r\n       \r\n    }\r\n    // 列的配置信息\r\n    columns = [\r\n        {title: 'ID', dataIndex: 'id', key: 'id', width: 50, align: 'center'},\r\n        {title: '直播课标题', dataIndex: 'live_title', key: 'live_title',align: 'center'},\r\n        {\r\n            title: '直播课封面', dataIndex: 'live_img', key: 'live_img',align: 'center',\r\n            render:text=>{\r\n              return(\r\n                <img src={config.BASE_URL+text} alt=\"图片\" className='LiveList-table-img' />\r\n              )\r\n            }\r\n           \r\n        },\r\n        {title: '开始时间', dataIndex: 'live_begin_time', key: 'live_begin_time',align: 'center'},\r\n        {title: '直播课老师', dataIndex: 'live_author', key: 'live_author',align: 'center'},\r\n        {title: '直播课价格', dataIndex: 'live_price', key: 'live_price',align: 'center'},\r\n        // 焦点switch\r\n        {\r\n            title: '首页焦点', dataIndex: 'is_focus', key: 'is_focus',align: 'center',\r\n            render:(text,record)=>{\r\n                return(\r\n                    <Switch checkedChildren=\"是\"  unCheckedChildren=\"否\" defaultChecked={record.is_focus===1} onChange={e=>this._onChange(e,record)}/>\r\n                )\r\n            }\r\n         \r\n        },\r\n        {\r\n            title: '操作', align: 'center',align: 'center',\r\n            render:(text,record)=>{\r\n                    return(\r\n                     \r\n                        <div>\r\n                            <Button type='primary' onClick={()=>{\r\n                                this.props.history.push({\r\n                                    pathname:\"/live/edit-live\",\r\n                                    state:record\r\n                                })\r\n                            }}>\r\n                                编辑\r\n                            </Button>\r\n                            <Divider type=\"vertical\" />\r\n                            <Button  type='primary'danger onClick={()=>{\r\n                                Modal.confirm({\r\n                                    title:'删除',\r\n                                    icon:<ExclamationCircleOutlined />,\r\n                                    content:`确定要删除ID为${record.id}的这个数据嘛？`,\r\n                                    onOk:()=> {\r\n                                       console.log(record.id);\r\n                                       deleteLive(record.id).then(res=>{\r\n                                           if(res.status===1){\r\n                                            message.success(res.msg)\r\n                                           this. _getLive()\r\n                                           }else{\r\n                                            message.error(\"请检查网络连接\")\r\n                                           }\r\n                                       })\r\n                                      }\r\n                                     \r\n\r\n                                })\r\n                            }}>\r\n                                删除\r\n                            </Button>\r\n\r\n                        </div>\r\n                    )\r\n            }\r\n          \r\n        }\r\n    ];\r\n    // 列表焦点图按钮的方法\r\n    _onChange(checked,record){\r\n        setFocusLive(record.id,checked?1:0).then(res=>{\r\n            if(res.status===1){\r\n                notification[\"success\"]({\r\n                    message:`课程:${record.live_title}`,\r\n                    description:`${checked ? \"设置为\":\"取消\"}焦点课程`,\r\n                    duration:2\r\n                })\r\n            }else{\r\n                message.error(\"请检查网络连接\")\r\n            }\r\n        })\r\n    }\r\n    // 发ajax请求\r\n    _getLive(pageNum=1,pageSize=5){\r\n        this.setState({\r\n            isLoading:true\r\n        })\r\n        getLive(pageNum,pageSize).then(res=>{\r\n            console.log(res);\r\n            if(res.status===1){\r\n               this.setState({\r\n                dataSource:res.data.live_list,\r\n                isLoading:false,\r\n                totalSize:res.data.live_count\r\n               })\r\n            }\r\n            // this.dataSource=res.data\r\n        })\r\n    }\r\n    render() {\r\n        // 添加按钮\r\n        let addBtn = (\r\n            <Button type={\"primary\"} onClick={() => {\r\n                this.props.history.push('/live/add-live');\r\n            }}>\r\n                添加直播课\r\n            </Button>\r\n        );\r\n\r\n        return (\r\n            <Card title={\"直播课列表\"} extra={addBtn}>\r\n                <Table\r\n                  loading={this.state.isLoading}//加载效果\r\n                    columns={this.columns}//列标题\r\n                    rowKey={\"id\"}\r\n                    dataSource={this.state.dataSource}//行数据\r\n                    pagination={{\r\n                        total: this.state.totalSize,\r\n                        pageSize: this.state.pageSize,\r\n                        onChange: (pageNum, pageSize)=>{\r\n                            this._getLive(pageNum, pageSize)\r\n                        }\r\n                    }}\r\n                />\r\n            </Card>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        let{pageNum,pageSize}=this.state\r\n        this._getLive(pageNum,pageSize)\r\n     }\r\n}\r\n","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lives\\pages\\LiveAdd.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\liveApi.js",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\components\\UploadImg.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\components\\rich-text-editor.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lives\\pages\\EditLive.jsx",["201","202","203"],"import React, { Component, createRef } from 'react'\r\nimport {Card,  Form, Input, Button, Select ,DatePicker ,Divider,message} from 'antd'\r\n// 引入上传图片的组件\r\nimport UploadImg from \"../../../components/UploadImg\";\r\n\r\n// 引入ajax请求\r\nimport { getLivePerson,getLiveTheme,editLive} from \"../../../api/liveApi\"\r\nimport { getUser } from \"../../../api/adminApi\"\r\n\r\n// 引入moment\r\nimport Moment from \"moment\";\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\nexport default class EditLive extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            imageUrl:'' ,\r\n            focusImgUlr:'',\r\n            live_person:[],\r\n            live_theme:[],\r\n            dataEdit:[],//回显数据\r\n            live_id:'',\r\n    \r\n        }\r\n        console.log(this.props.location.state);\r\n        this.refEditLive=React.createRef()\r\n    }\r\n  \r\n    \r\n    onFinish=async(values)=>{\r\n        console.log(values);\r\n        let {imageUrl,focusImgUlr,live_id} =  this.state;\r\n        // console.log(imageUrl,focusImgUlr,live_id);\r\n\r\n        let live_begin_time = Moment(values.live_time[0]).format(\"YYYY-MM-DD HH:mm:ss\")\r\n        let live_end_time = Moment(values.live_time[1]).format(\"YYYY-MM-DD HH:mm:ss\")\r\n        editLive(getUser().token,live_id,values.live_title, values.live_url, values.live_author,imageUrl,live_begin_time,live_end_time,values.live_price,values.live_person_id, values.live_theme_id,focusImgUlr).then(result=>{\r\n            // console.log(result);\r\n            if(result && result.status == 1){\r\n                message.success(\"编辑直播课程成功！\")\r\n                this.props.history.goBack();\r\n            }\r\n        }).catch(err=>{\r\n            message.error(\"编辑直播课程失败！\")\r\n        })\r\n       \r\n        }\r\n    render() {\r\n        return (\r\n            <Card title=\"修改直播课\"  className='lives-card' >\r\n\r\n                    <Form  ref={this.refEditLive} name=\"control-hooks\" onFinish={this.onFinish} labelCol={{ span: 2 }} wrapperCol={{ span: 14}}>\r\n                        <Form.Item name=\"live_title\" label=\"直播课名称：\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"live_author\" label=\"直播课作者：\" rules={[{ required: true  ,message: '请输入直播课作者!'}]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"live_price\" label=\"直播课价格：\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"live_time\" label=\"直播课时间：\" rules={[{ required: true }]}>\r\n                            <RangePicker />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"live_person_id\" label=\"适用人群：\" rules={[{ required: true }]}>\r\n                            <Select\r\n                            placeholder=\"请输入适用人群\"\r\n                            allowClear\r\n                            >\r\n                                {\r\n                                    this.state.live_person.map((item)=>{\r\n                                        return(\r\n                                            <Option value={item.id} key={item.id}>{item.live_person_name}</Option>\r\n                                        )\r\n                                    })\r\n                                }\r\n                          \r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"live_theme_id\" label=\"内容主题：\" rules={[{ required: true }]}>\r\n                            <Select\r\n                            placeholder=\"请输入内容主题\"\r\n                            allowClear\r\n                            >\r\n                              {\r\n                                this.state.live_theme.map(item=>{\r\n                                    return (\r\n                                        <Option value={item.id} key={item.id}>{item.live_theme_title}</Option>\r\n                                    )\r\n                                })\r\n                            }\r\n                           \r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"live_url\" label=\"直播课地址：\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                        label=\"直播课封面图\"\r\n                        name=\"live_img\"\r\n                    >\r\n                        <UploadImg\r\n                            upLoadBtnTitle={\"上传封面图\"}\r\n                            upLoadName={\"live_img\"}\r\n                            upImage={this.state.imageUrl}\r\n                            upLoadAction={\"/api/auth/live/upload_live\"}\r\n                            successCallBack={(name)=>{\r\n                                message.success(\"直播课程封面上传成功\")\r\n                                this.setState({\r\n                                    imageUrl:name\r\n                                })\r\n                            }}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"首页轮播图\"\r\n                        name=\"focus_img\"\r\n                    >\r\n                        <UploadImg\r\n                            upLoadBtnTitle={\"上传轮播图\"}\r\n                            upLoadName={\"live_img\"}\r\n                            upImage={this.state.focusImgUlr}\r\n                            upLoadAction={\"/api/auth/live/upload_live\"}\r\n                            successCallBack={(name)=>{\r\n                                message.success(\"直播课焦点图上传成功\")\r\n                                this.setState({\r\n                                    focusImgUlr:name\r\n                                })\r\n                            }}\r\n                        />\r\n                    </Form.Item>\r\n                        <Form.Item  className=\"liveAdd-btn\" >\r\n                             <div>\r\n                                     <Button type=\"primary\" htmlType=\"submit\" >保存</Button>\r\n                                    <Divider type=\"vertical\" />\r\n                                    <Button>取消</Button>\r\n                          </div>\r\n                        </Form.Item>\r\n                        </Form>\r\n            </Card>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        let{dataEdit}=this.state\r\n        // 获取适用人群\r\n        getLivePerson().then(res=>{\r\n           if(res.status===1){\r\n            this.setState({\r\n                live_person:res.data\r\n            })\r\n           }\r\n        })\r\n        // 获取内容主题\r\n        getLiveTheme().then(res=>{\r\n            if(res.status===1){\r\n                this.setState({\r\n                    live_theme:res.data\r\n                })\r\n               }\r\n        })\r\n        // 回显数据\r\n        if (this.props.location.state) {\r\n            let liveItem = this.props.location.state;\r\n            if (liveItem) {\r\n                this.refEditLive.current.setFieldsValue({\r\n                    live_title: liveItem.live_title,\r\n                    live_author: liveItem.live_author,\r\n                    live_price: liveItem.live_price,\r\n                    live_time:[Moment(liveItem.live_begin_time),Moment(liveItem.live_end_time)],\r\n                    live_person_id: liveItem.live_person_id,\r\n                    live_theme_id: liveItem.live_theme_id,\r\n                    live_url: liveItem.live_url,\r\n                })\r\n            }\r\n            this.setState({\r\n                imageUrl:liveItem.live_img,\r\n                focusImgUlr:liveItem.focus_img,\r\n                live_id:liveItem.id\r\n            })\r\n        }\r\n     \r\n    }\r\n}\r\n","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\activities\\pages\\ActivitieList.jsx",["204","205"],"import React, { Component } from 'react'\r\nimport {Card, Button, Table,Divider,Switch, message ,Modal,notification } from 'antd'\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\n// ajax请求\r\nimport { getActivitiesList, deleteActivities,setFocusActivities} from \"../../../api/activitiesApi\";\r\n// 获取图片默认地址\r\nexport default class ActivitieList extends Component {\r\n    // 一开始获取数据\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            isLoading:false,\r\n            pageSize:5,\r\n            totalSize:0,\r\n            dataSource:[],//数据\r\n        }\r\n       \r\n    }\r\n    // 列的配置信息\r\n    columns = [\r\n        {title: 'ID', dataIndex: 'id', key: 'id', width: 50, align: 'center'},\r\n        {title: '活动标题', dataIndex: 'activities_name', key: 'activities_name',align: 'center'},\r\n        {title: '活动时间', dataIndex: 'activities_time', key: 'activities_time',align: 'center',},\r\n        {title: '活动价格', dataIndex: 'activities_price', key: 'activities_price',align: 'center'},\r\n        {title: '营期', dataIndex: 'activities_bus_day_id', key: 'activities_bus_day_id',align: 'center'},\r\n        {\r\n            title: '首页焦点', dataIndex: 'is_focus', key: 'is_focus',align: 'center',\r\n            render:(text,record)=>{\r\n                return(\r\n                    <Switch checkedChildren=\"是\"  unCheckedChildren=\"否\" defaultChecked={record.is_focus===1} onChange={e=>this._onChange(e,record)}/>\r\n                )\r\n            }\r\n         \r\n        },\r\n        {\r\n            title: '操作', align: 'center',align: 'center',\r\n            render:(text,record)=>{\r\n                    return(\r\n                     \r\n                        <div>\r\n                            <Button type='primary' onClick={()=>{\r\n                                this.props.history.push({\r\n                                    pathname:\"/activities/edit-activities\",\r\n                                    state:record\r\n                                })\r\n                            }}>\r\n                                编辑\r\n                            </Button>\r\n                            <Divider type=\"vertical\" />\r\n                            <Button  type='primary'danger onClick={()=>{\r\n                                Modal.confirm({\r\n                                    title:'删除',\r\n                                    icon:<ExclamationCircleOutlined />,\r\n                                    content:`确定要删除ID为${record.id}的这个数据嘛？`,\r\n                                    onOk:()=> {\r\n                                       console.log(record.id);\r\n                                       deleteActivities(record.id).then(res=>{\r\n                                           if(res.status===1){\r\n                                            message.success(res.msg)\r\n                                           this. _getLive()\r\n                                           }else{\r\n                                            message.error(\"请检查网络连接\")\r\n                                           }\r\n                                       })\r\n                                      }\r\n                                     \r\n\r\n                                })\r\n                            }}>\r\n                                删除\r\n                            </Button>\r\n\r\n                        </div>\r\n                    )\r\n            }\r\n          \r\n        }\r\n    ];\r\n    // 列表焦点图按钮的方法\r\n    _onChange(checked,record){\r\n        setFocusActivities(record.id,checked?1:0).then(res=>{\r\n            if(res.status===1){\r\n                notification[\"success\"]({\r\n                    message:`课程:${record.live_title}`,\r\n                    description:`${checked ? \"设置为\":\"取消\"}焦点课程`,\r\n                    duration:2\r\n                })\r\n            }else{\r\n                message.error(\"请检查网络连接\")\r\n            }\r\n        })\r\n    }\r\n    // 发ajax请求\r\n    _getLive(pageNum=1,pageSize=5){\r\n        console.log(\"haah\");\r\n        this.setState({\r\n            isLoading:true\r\n        })\r\n        getActivitiesList(pageNum,pageSize).then(res=>{\r\n            console.log(res);\r\n            if(res.status===1){\r\n               this.setState({\r\n                dataSource:res.data.activities_list,\r\n                isLoading:false,\r\n                totalSize:res.data.activities_count\r\n               })\r\n            }\r\n            // this.dataSource=res.data\r\n        })\r\n    }\r\n    render() {\r\n        // 添加按钮\r\n        let addBtn = (\r\n            <Button type={\"primary\"} onClick={() => {\r\n                this.props.history.push('/activities/add-activities');\r\n            }}>\r\n                添加直播课\r\n            </Button>\r\n        );\r\n\r\n        return (\r\n            <Card title={\"活动列表\"} extra={addBtn}>\r\n                <Table\r\n                  loading={this.state.isLoading}//加载效果\r\n                    columns={this.columns}//列标题\r\n                    rowKey={\"id\"}\r\n                    dataSource={this.state.dataSource}//行数据\r\n                    pagination={{\r\n                        total: this.state.totalSize,\r\n                        pageSize: this.state.pageSize,\r\n                        showSizeChanger:true,\r\n                        onShowSizeChange:(current, pageSize)=>{\r\n                            this.setState({\r\n                                pageSize\r\n                            })\r\n                        },\r\n                        onChange: (pageNum, pageSize)=>{\r\n                            this._getLive(pageNum, pageSize)\r\n                        }\r\n                    }}\r\n                />\r\n            </Card>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        let{pageNum,pageSize}=this.state\r\n        this._getLive(pageNum,pageSize)\r\n     }\r\n}\r\n","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\activities\\pages\\AddActivities.jsx",["206","207","208"],"\r\nimport React, { Component } from 'react'\r\nimport { Card, Form, Input, Button, Select, DatePicker, Divider, message } from 'antd'\r\n\r\n// 引入上传图片的组件\r\nimport UploadImg from \"../../../components/UploadImg\";\r\n// 引入tag选择\r\nimport ActivitiesTag from '../../../components/z-tag'\r\n// 引入富文本编辑器\r\nimport RichTextEdit from \"../../../components/rich-text-editor\"\r\n\r\n// 引入ajax请求\r\nimport { getActivitiesBus, getActivitiesAddress, getActivitiesObject } from \"../../../api/activitiesApi\"\r\nimport { getUser } from \"../../../api/adminApi\"\r\n// 引入moment\r\nimport Moment from \"moment\";\r\nconst { Option } = Select;\r\nexport default class AddActivities extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            activities_address:[],//活动获取的地址\r\n            activities_object_name:[],//招生对象\r\n            activities_bus_day:[],//获取营期\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onFinish = async (values) => {\r\n        console.log(values);\r\n    }\r\n    onChange = (date, dateString) => {\r\n        console.log(date, dateString);\r\n    }\r\n    render() {\r\n        let{activities_address,activities_object_name,activities_bus_day}=this.state\r\n        return (\r\n            <Card title=\"添加直播课\" className='lives-card' >\r\n                <Form name=\"control-hooks\" onFinish={this.onFinish} labelCol={{ span: 2 }} wrapperCol={{ span: 14 }}>\r\n                    <Form.Item name=\"activities_name\" label=\"活动标题：\" rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"activities_time\" label=\"活动日期：\" rules={[{ required: true, message: '请输入直播课作者!' }]}>\r\n                        <DatePicker onChange={this.onChange} placeholder=\"请输入日期\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"activities_price\" label=\"活动价格：\" rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"activities_address_id\" label=\"活动地点：\" rules={[{ required: true }]}>\r\n                        <Select\r\n                            placeholder=\"请选择活动地点\"\r\n                            allowClear\r\n                        >\r\n                            {\r\n                                activities_address.map(item=>{\r\n                                    return(\r\n                                        <Option value={item.id} key={item.id}>{item.activities_address}</Option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"activities_object_id\" label=\"招生对象：\" rules={[{ required: true }]}>\r\n                        <Select\r\n                            placeholder=\"请选择招生对象\"\r\n                            allowClear\r\n                        >\r\n                           {\r\n                                 activities_object_name.map(item=>{\r\n                                    return(\r\n                                        <Option value={item.id} key={item.id}>{item. activities_object_name}</Option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"activities_bus_day_id\" label=\"选择营期：\" rules={[{ required: true }]}>\r\n                        <Select\r\n                            placeholder=\"请选择营期\"\r\n                            allowClear\r\n                        >\r\n                          {\r\n                                activities_bus_day.map(item=>{\r\n                                    return(\r\n                                        <Option value={item.id} key={item.id}>{item.activities_bus_day}</Option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"activities_tag\" label=\"添加活动标签：\">\r\n                        <ActivitiesTag tagsCallBack={(tags) => {\r\n                            console.log(tags);\r\n                        }} />\r\n                    </Form.Item>\r\n                  \r\n                    <Form.Item\r\n                        label=\"活动封面图\"\r\n                        name=\"activities_img\"\r\n                    >\r\n                          <UploadImg\r\n                            upLoadBtnTitle={\"上传活动封面\"}\r\n                            upLoadName={\"activities_img\"}\r\n                            upLoadAction={\"/api/auth/activities/upload_activities\"}\r\n                            successCallBack={(name)=>{\r\n                                message.success(\"直播课程封面上传成功\")\r\n                                this.setState({\r\n                                    imageUrl:name\r\n                                })\r\n                            }}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"首页轮播图\"\r\n                        name=\"focus_img\"\r\n                    >\r\n                          <UploadImg\r\n                            upLoadBtnTitle={\"上传首页轮播图\"}\r\n                            upLoadName={\"activities_img\"}\r\n                            upLoadAction={\"/api/auth/activities/upload_activities\"}\r\n                            successCallBack={(name)=>{\r\n                                message.success(\"直播课程封面上传成功\")\r\n                                this.setState({\r\n                                    imageUrl:name\r\n                                })\r\n                            }}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"活动介绍\"\r\n                        name=\"activities_intro\"\r\n                        wrapperCol={{ span: 20 }}\r\n                    >\r\n                        <RichTextEdit ref={this.activities_intro_ref} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"行程安排\"\r\n                        name=\"activities_trip\"\r\n                        wrapperCol={{ span: 20 }}\r\n                    >\r\n                        <RichTextEdit ref={this.activities_trip_ref} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"开营日期\"\r\n                        name=\"activities_days\"\r\n                        wrapperCol={{ span: 20 }}\r\n                    >\r\n                        <RichTextEdit ref={this.activities_days_ref} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"报名须知\"\r\n                        name=\"activities_notice\"\r\n                        wrapperCol={{ span: 20 }}\r\n                    >\r\n                        <RichTextEdit ref={this.activities_notice_ref} />\r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item className=\"liveAdd-btn\" >\r\n                        <div>\r\n                            <Button type=\"primary\" htmlType=\"submit\" >保存</Button>\r\n                            <Divider type=\"vertical\" />\r\n                            <Button>取消</Button>\r\n                        </div>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Card>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        // 获取地址\r\n        getActivitiesAddress().then(res=>{\r\n            if(res.status===1){\r\n                this.setState({\r\n                    activities_address:res.data\r\n                })\r\n            }\r\n        })\r\n        // 获取招生对象\r\n        getActivitiesObject().then(res=>{\r\n            if(res.status===1){\r\n                this.setState({\r\n                    activities_object_name:res.data\r\n                })\r\n            }\r\n        })\r\n        // 获取 营期\r\n        getActivitiesBus().then(res=>{\r\n            console.log(res);\r\n            this.setState({\r\n                activities_bus_day:res.data\r\n            })\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\activities\\pages\\EditActivities.jsx",["209","210","211"],"\r\nimport React, { Component } from 'react'\r\nimport { Card, Form, Input, Button, Select, DatePicker, Divider, message } from 'antd'\r\n\r\n// 引入上传图片的组件\r\nimport UploadImg from \"../../../components/UploadImg\";\r\n// 引入tag选择\r\nimport ActivitiesTag from '../../../components/z-tag'\r\n// 引入富文本编辑器\r\nimport RichTextEdit from \"../../../components/rich-text-editor\"\r\n\r\n// 引入ajax请求\r\nimport { getActivitiesBus, getActivitiesAddress, getActivitiesObject } from \"../../../api/activitiesApi\"\r\nimport { getUser } from \"../../../api/adminApi\"\r\n// 引入moment\r\nimport Moment from \"moment\";\r\nconst { Option } = Select;\r\nexport default class AddActivities extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            activities_address:[],//活动获取的地址\r\n            activities_object_name:[],//招生对象\r\n            activities_bus_day:[],//获取营期\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onFinish = async (values) => {\r\n        console.log(values);\r\n    }\r\n    onChange = (date, dateString) => {\r\n        console.log(date, dateString);\r\n    }\r\n    render() {\r\n        let{activities_address,activities_object_name,activities_bus_day}=this.state\r\n        return (\r\n            <Card title=\"添加直播课\" className='lives-card' >\r\n                <Form name=\"control-hooks\" onFinish={this.onFinish} labelCol={{ span: 2 }} wrapperCol={{ span: 14 }}>\r\n                    <Form.Item name=\"activities_name\" label=\"活动标题：\" rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"activities_time\" label=\"活动日期：\" rules={[{ required: true, message: '请输入直播课作者!' }]}>\r\n                        <DatePicker onChange={this.onChange} placeholder=\"请输入日期\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"activities_price\" label=\"活动价格：\" rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"activities_address_id\" label=\"活动地点：\" rules={[{ required: true }]}>\r\n                        <Select\r\n                            placeholder=\"请选择活动地点\"\r\n                            allowClear\r\n                        >\r\n                            {\r\n                                activities_address.map(item=>{\r\n                                    return(\r\n                                        <Option value={item.id} key={item.id}>{item.activities_address}</Option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"activities_object_id\" label=\"招生对象：\" rules={[{ required: true }]}>\r\n                        <Select\r\n                            placeholder=\"请选择招生对象\"\r\n                            allowClear\r\n                        >\r\n                           {\r\n                                 activities_object_name.map(item=>{\r\n                                    return(\r\n                                        <Option value={item.id} key={item.id}>{item. activities_object_name}</Option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"activities_bus_day_id\" label=\"选择营期：\" rules={[{ required: true }]}>\r\n                        <Select\r\n                            placeholder=\"请选择营期\"\r\n                            allowClear\r\n                        >\r\n                          {\r\n                                activities_bus_day.map(item=>{\r\n                                    return(\r\n                                        <Option value={item.id} key={item.id}>{item.activities_bus_day}</Option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"activities_tag\" label=\"添加活动标签：\">\r\n                        <ActivitiesTag tagsCallBack={(tags) => {\r\n                            console.log(tags);\r\n                        }} />\r\n                    </Form.Item>\r\n                \r\n                    <Form.Item\r\n                        label=\"活动封面图\"\r\n                        name=\"activities_img\"\r\n                    >\r\n                          <UploadImg\r\n                            upLoadBtnTitle={\"上传活动封面\"}\r\n                            upLoadName={\"activities_img\"}\r\n                            upLoadAction={\"/api/auth/activities/upload_activities\"}\r\n                            successCallBack={(name)=>{\r\n                                message.success(\"直播课程封面上传成功\")\r\n                                this.setState({\r\n                                    imageUrl:name\r\n                                })\r\n                            }}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"首页轮播图\"\r\n                        name=\"focus_img\"\r\n                    >\r\n                          <UploadImg\r\n                            upLoadBtnTitle={\"上传首页轮播图\"}\r\n                            upLoadName={\"focus_img\"}\r\n                            upLoadAction={\"/api/auth/activities/upload_activities\"}\r\n                            successCallBack={(name)=>{\r\n                                message.success(\"直播课程封面上传成功\")\r\n                                this.setState({\r\n                                    imageUrl:name\r\n                                })\r\n                            }}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"活动介绍\"\r\n                        name=\"activities_intro\"\r\n                        wrapperCol={{ span: 20 }}\r\n                    >\r\n                        <RichTextEdit ref={this.activities_intro_ref} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"行程安排\"\r\n                        name=\"activities_trip\"\r\n                        wrapperCol={{ span: 20 }}\r\n                    >\r\n                        <RichTextEdit ref={this.activities_trip_ref} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"开营日期\"\r\n                        name=\"activities_days\"\r\n                        wrapperCol={{ span: 20 }}\r\n                    >\r\n                        <RichTextEdit ref={this.activities_days_ref} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"报名须知\"\r\n                        name=\"activities_notice\"\r\n                        wrapperCol={{ span: 20 }}\r\n                    >\r\n                        <RichTextEdit ref={this.activities_notice_ref} />\r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item className=\"liveAdd-btn\" >\r\n                        <div>\r\n                            <Button type=\"primary\" htmlType=\"submit\" >保存</Button>\r\n                            <Divider type=\"vertical\" />\r\n                            <Button>取消</Button>\r\n                        </div>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Card>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        // 获取地址\r\n        getActivitiesAddress().then(res=>{\r\n            if(res.status===1){\r\n                this.setState({\r\n                    activities_address:res.data\r\n                })\r\n            }\r\n        })\r\n        // 获取招生对象\r\n        getActivitiesObject().then(res=>{\r\n            if(res.status===1){\r\n                this.setState({\r\n                    activities_object_name:res.data\r\n                })\r\n            }\r\n        })\r\n        // 获取 营期\r\n        getActivitiesBus().then(res=>{\r\n            console.log(res);\r\n            this.setState({\r\n                activities_bus_day:res.data\r\n            })\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\activitiesApi.js",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\components\\z-tag.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\homeApi.js",[],["212","213"],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lifejob\\pages\\EditLife.jsx",["214","215","216"],"import React, { Component, createRef } from 'react'\r\nimport {Card,  Form, Input, Button, Select ,DatePicker ,Divider,message} from 'antd'\r\n// 引入上传图片的组件\r\nimport UploadImg from \"../../../components/UploadImg\";\r\n\r\n// 引入ajax请求\r\nimport { getLivePerson,getLiveTheme,editLive} from \"../../../api/liveApi\"\r\nimport { getUser } from \"../../../api/adminApi\"\r\n\r\n// 引入moment\r\nimport Moment from \"moment\";\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\nexport default class EditLife extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            imageUrl:'' ,\r\n            focusImgUlr:'',\r\n            live_person:[],\r\n            live_theme:[],\r\n            dataEdit:[],//回显数据\r\n            live_id:'',\r\n    \r\n        }\r\n        console.log(this.props.location.state);\r\n        this.refEditLive=React.createRef()\r\n    }\r\n  \r\n    \r\n    onFinish=async(values)=>{\r\n        console.log(values);\r\n        let {imageUrl,focusImgUlr,live_id} =  this.state;\r\n        // console.log(imageUrl,focusImgUlr,live_id);\r\n\r\n        let live_begin_time = Moment(values.live_time[0]).format(\"YYYY-MM-DD HH:mm:ss\")\r\n        let live_end_time = Moment(values.live_time[1]).format(\"YYYY-MM-DD HH:mm:ss\")\r\n        editLive(getUser().token,live_id,values.live_title, values.live_url, values.live_author,imageUrl,live_begin_time,live_end_time,values.live_price,values.live_person_id, values.live_theme_id,focusImgUlr).then(result=>{\r\n            // console.log(result);\r\n            if(result && result.status == 1){\r\n                message.success(\"编辑直播课程成功！\")\r\n                this.props.history.goBack();\r\n            }\r\n        }).catch(err=>{\r\n            message.error(\"编辑直播课程失败！\")\r\n        })\r\n       \r\n        }\r\n    render() {\r\n        return (\r\n            <Card title=\"修改直播课\"  className='lives-card' >\r\n\r\n                    <Form  ref={this.refEditLive} name=\"control-hooks\" onFinish={this.onFinish} labelCol={{ span: 2 }} wrapperCol={{ span: 14}}>\r\n                        <Form.Item name=\"live_title\" label=\"直播课名称：\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"live_author\" label=\"直播课作者：\" rules={[{ required: true  ,message: '请输入直播课作者!'}]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"live_price\" label=\"直播课价格：\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"live_time\" label=\"直播课时间：\" rules={[{ required: true }]}>\r\n                            <RangePicker />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"live_person_id\" label=\"适用人群：\" rules={[{ required: true }]}>\r\n                            <Select\r\n                            placeholder=\"请输入适用人群\"\r\n                            allowClear\r\n                            >\r\n                                {\r\n                                    this.state.live_person.map((item)=>{\r\n                                        return(\r\n                                            <Option value={item.id} key={item.id}>{item.live_person_name}</Option>\r\n                                        )\r\n                                    })\r\n                                }\r\n                          \r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"live_theme_id\" label=\"内容主题：\" rules={[{ required: true }]}>\r\n                            <Select\r\n                            placeholder=\"请输入内容主题\"\r\n                            allowClear\r\n                            >\r\n                              {\r\n                                this.state.live_theme.map(item=>{\r\n                                    return (\r\n                                        <Option value={item.id} key={item.id}>{item.live_theme_title}</Option>\r\n                                    )\r\n                                })\r\n                            }\r\n                           \r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"live_url\" label=\"直播课地址：\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                        label=\"直播课封面图\"\r\n                        name=\"live_img\"\r\n                    >\r\n                        <UploadImg\r\n                            upLoadBtnTitle={\"上传封面图\"}\r\n                            upLoadName={\"live_img\"}\r\n                            upImage={this.state.imageUrl}\r\n                            upLoadAction={\"/api/auth/live/upload_live\"}\r\n                            successCallBack={(name)=>{\r\n                                message.success(\"直播课程封面上传成功\")\r\n                                this.setState({\r\n                                    imageUrl:name\r\n                                })\r\n                            }}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"首页轮播图\"\r\n                        name=\"focus_img\"\r\n                    >\r\n                        <UploadImg\r\n                            upLoadBtnTitle={\"上传轮播图\"}\r\n                            upLoadName={\"live_img\"}\r\n                            upImage={this.state.focusImgUlr}\r\n                            upLoadAction={\"/api/auth/live/upload_live\"}\r\n                            successCallBack={(name)=>{\r\n                                message.success(\"直播课焦点图上传成功\")\r\n                                this.setState({\r\n                                    focusImgUlr:name\r\n                                })\r\n                            }}\r\n                        />\r\n                    </Form.Item>\r\n                        <Form.Item  className=\"liveAdd-btn\" >\r\n                             <div>\r\n                                     <Button type=\"primary\" htmlType=\"submit\" >保存</Button>\r\n                                    <Divider type=\"vertical\" />\r\n                                    <Button>取消</Button>\r\n                          </div>\r\n                        </Form.Item>\r\n                        </Form>\r\n            </Card>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        let{dataEdit}=this.state\r\n        // 获取适用人群\r\n        getLivePerson().then(res=>{\r\n           if(res.status===1){\r\n            this.setState({\r\n                live_person:res.data\r\n            })\r\n           }\r\n        })\r\n        // 获取内容主题\r\n        getLiveTheme().then(res=>{\r\n            if(res.status===1){\r\n                this.setState({\r\n                    live_theme:res.data\r\n                })\r\n               }\r\n        })\r\n        // 回显数据\r\n        if (this.props.location.state) {\r\n            let liveItem = this.props.location.state;\r\n            if (liveItem) {\r\n                this.refEditLive.current.setFieldsValue({\r\n                    live_title: liveItem.live_title,\r\n                    live_author: liveItem.live_author,\r\n                    live_price: liveItem.live_price,\r\n                    live_time:[Moment(liveItem.live_begin_time),Moment(liveItem.live_end_time)],\r\n                    live_person_id: liveItem.live_person_id,\r\n                    live_theme_id: liveItem.live_theme_id,\r\n                    live_url: liveItem.live_url,\r\n                })\r\n            }\r\n            this.setState({\r\n                imageUrl:liveItem.live_img,\r\n                focusImgUlr:liveItem.focus_img,\r\n                live_id:liveItem.id\r\n            })\r\n        }\r\n     \r\n    }\r\n}\r\n","C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lifejob\\pages\\LifeAdd.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\lifejob\\pages\\LifeList.jsx",["217","218"],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\resource\\pages\\EditResource.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\resource\\pages\\AddResource.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\resource\\pages\\ResourceList.jsx",["219","220"],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\home\\pages\\HomeList.jsx",["221"],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\home\\pages\\SiteSetting.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\home\\components\\top-card\\index.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\pages\\home\\components\\main-echarts\\index.jsx",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\resourceApi.js",[],"C:\\Users\\lenovo\\Desktop\\react后台啊管理系统\\myapp\\src\\api\\lifejobApi.js",[],{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":59,"column":21,"nodeType":"228","messageId":"229","endLine":59,"endColumn":38,"fix":"230"},{"ruleId":"231","severity":1,"message":"232","line":71,"column":70,"nodeType":"233","messageId":"234","endLine":71,"endColumn":72},{"ruleId":"235","severity":1,"message":"236","line":48,"column":58,"nodeType":"237","endLine":48,"endColumn":63},{"ruleId":"238","severity":1,"message":"239","line":134,"column":32,"nodeType":"240","endLine":134,"endColumn":69},{"ruleId":"241","severity":1,"message":"242","line":1,"column":1,"nodeType":"243","endLine":5,"endColumn":2},{"ruleId":"244","severity":1,"message":"245","line":7,"column":38,"nodeType":"246","messageId":"247","endLine":7,"endColumn":46},{"ruleId":"248","severity":1,"message":"249","line":47,"column":42,"nodeType":"250","messageId":"234","endLine":47,"endColumn":47},{"ruleId":"226","severity":1,"message":"251","line":71,"column":44,"nodeType":"228","messageId":"229","endLine":71,"endColumn":58,"fix":"252"},{"ruleId":"244","severity":1,"message":"253","line":1,"column":28,"nodeType":"246","messageId":"247","endLine":1,"endColumn":37},{"ruleId":"231","severity":1,"message":"232","line":41,"column":40,"nodeType":"233","messageId":"234","endLine":41,"endColumn":42},{"ruleId":"244","severity":1,"message":"254","line":146,"column":13,"nodeType":"246","messageId":"247","endLine":146,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":36,"column":42,"nodeType":"250","messageId":"234","endLine":36,"endColumn":47},{"ruleId":"226","severity":1,"message":"251","line":60,"column":44,"nodeType":"228","messageId":"229","endLine":60,"endColumn":58,"fix":"255"},{"ruleId":"244","severity":1,"message":"256","line":14,"column":10,"nodeType":"246","messageId":"247","endLine":14,"endColumn":17},{"ruleId":"244","severity":1,"message":"257","line":16,"column":8,"nodeType":"246","messageId":"247","endLine":16,"endColumn":14},{"ruleId":"226","severity":1,"message":"258","line":73,"column":80,"nodeType":"228","messageId":"229","endLine":73,"endColumn":108,"fix":"259"},{"ruleId":"244","severity":1,"message":"256","line":14,"column":10,"nodeType":"246","messageId":"247","endLine":14,"endColumn":17},{"ruleId":"244","severity":1,"message":"257","line":16,"column":8,"nodeType":"246","messageId":"247","endLine":16,"endColumn":14},{"ruleId":"226","severity":1,"message":"258","line":73,"column":80,"nodeType":"228","messageId":"229","endLine":73,"endColumn":108,"fix":"260"},{"ruleId":"222","replacedBy":"261"},{"ruleId":"224","replacedBy":"262"},{"ruleId":"244","severity":1,"message":"253","line":1,"column":28,"nodeType":"246","messageId":"247","endLine":1,"endColumn":37},{"ruleId":"231","severity":1,"message":"232","line":41,"column":40,"nodeType":"233","messageId":"234","endLine":41,"endColumn":42},{"ruleId":"244","severity":1,"message":"254","line":146,"column":13,"nodeType":"246","messageId":"247","endLine":146,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":46,"column":42,"nodeType":"250","messageId":"234","endLine":46,"endColumn":47},{"ruleId":"244","severity":1,"message":"263","line":150,"column":27,"nodeType":"246","messageId":"247","endLine":150,"endColumn":34},{"ruleId":"248","severity":1,"message":"249","line":48,"column":42,"nodeType":"250","messageId":"234","endLine":48,"endColumn":47},{"ruleId":"244","severity":1,"message":"263","line":151,"column":27,"nodeType":"246","messageId":"247","endLine":151,"endColumn":34},{"ruleId":"244","severity":1,"message":"264","line":4,"column":8,"nodeType":"246","messageId":"247","endLine":4,"endColumn":11},"no-native-reassign",["265"],"no-negated-in-lhs",["266"],"no-whitespace-before-property","Unexpected whitespace before property _renderMenu.","MemberExpression","unexpectedWhitespace",{"range":"267","text":"268"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Checkbox' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'align'.","ObjectExpression","Unexpected whitespace before property _getLive.",{"range":"269","text":"268"},"'createRef' is defined but never used.","'dataEdit' is assigned a value but never used.",{"range":"270","text":"268"},"'getUser' is defined but never used.","'Moment' is defined but never used.","Unexpected whitespace before property activities_object_name.",{"range":"271","text":"268"},{"range":"272","text":"268"},["265"],["266"],"'pageNum' is assigned a value but never used.","'AAA' is defined but never used.","no-global-assign","no-unsafe-negation",[1836,1838],".",[3086,3088],[2812,2814],[3078,3080],[3078,3080]]